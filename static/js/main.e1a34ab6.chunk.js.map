{"version":3,"sources":["components/break.js","components/session.js","components/timer.js","App.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","className","disabled","isPlay","onClick","breakInterval","decreaseBreak","sessionLength","increaseBreak","SessionLength","decreaseSession","increaseSession","Timer","state","isSession","timerSec","intervalId","playTimer","bind","decreaseTimer","stopTimer","resetTimer","setInterval","this","onPlayStopTimer","setState","timerMin","toggleInterval","updateTimerMin","prevState","clearInterval","React","Component","App","breakLength","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","onToggleInterval","onUpdateTimerMinute","onResetTimer","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1a34ab6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction BreakInterval(props) {\n    function decreaseCounter() {\n        if (props.breakInterval === 1) {\n            return;\n        }\n        props.decreaseBreak()\n    }\n\n    function increaseCounter() {\n        if (props.sessionLength === 60) {\n            return;\n        }\n\n        props.increaseBreak()\n    }\n\n  return (\n    <section>\n        <h4>Chill Sesh</h4>\n        <section className=\"interval-container\">\n            <button disabled= {props.isPlay === true ? \"disabled\" : \"\"} onClick={decreaseCounter}>-</button>\n            <p className=\"interval-length\">{props.breakInterval}</p>\n            <button disabled= {props.isPlay === true ? \"disabled\" : \"\"} onClick={increaseCounter}>+</button>\n        </section>\n    </section>\n    )\n}\n\nexport default BreakInterval;","import React from 'react';\n\nfunction SessionLength(props) {\n    function decreaseSession() {\n        if (props.sessionLength === 1) {\n            return;\n        }\n        props.decreaseSession();\n    }\n\n    function increaseSession() {\n        if (props.sessionLength === 60) {\n            return;\n        }\n        props.increaseSession();\n    }\n  return (\n    <section>\n    <h4>Grind Time</h4>\n        <section className=\"interval-container\">\n            <button disabled= {props.isPlay === true ? \"disabled\" : \"\"} onClick={decreaseSession}>-</button>\n            <p className=\"interval-length\">{props.sessionLength}</p>\n            <button  disabled= {props.isPlay === true ? \"disabled\" : \"\"} onClick={increaseSession}>+</button>\n        </section>\n    </section>\n        \n    );\n}\n\nexport default SessionLength;","import React from 'react';\n\nclass Timer extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            isSession: true,\n            timerSec: 0,\n            intervalId : 0\n        };\n        this.playTimer = this.playTimer.bind(this);\n        this.decreaseTimer = this.decreaseTimer.bind(this);\n        this.stopTimer = this.stopTimer.bind(this);\n        this.resetTimer = this.resetTimer.bind(this)\n    }\n\n    playTimer(){\n        let intervalId = setInterval(this.decreaseTimer, 1000)\n        this.props.onPlayStopTimer(true);\n        this.setState({\n            intervalId: intervalId\n        })\n    }\n\n    decreaseTimer(){\n        switch(this.state.timerSec){\n            case 0:\n                if(this.props.timerMin === 0){\n                    if(this.state.isSession){\n                        this.setState({\n                            isSession: false\n                        });\n\n                        this.props.toggleInterval(this.state.isSession);\n\n                    }else{\n                        this.setState({\n                            isSession: true\n                        });\n                    \n                        this.props.toggleInterval(this.state.isSession);\n                    }\n                }else{\n                    this.props.updateTimerMin() \n                    this.setState({\n                    timerSec: 59\n                }) \n            }\n                break;\n            default:\n                this.setState((prevState) =>{\n                    return{\n                        timerSec: prevState.timerSec -1\n                    }\n\n                })\n                break;\n\n        }\n\n    }\n\n    stopTimer(){\n        clearInterval(this.state.intervalId);\n        this.props.onPlayStopTimer(false);\n\n    }\n\n    resetTimer(){\n        this.stopTimer();\n        this.props.resetTimer();\n        this.props.onPlayStopTimer(false);\n        this.setState({\n            timerSec:0,\n            isSession: true\n        })\n    }\n\n\n    render () {\n        return (\n            <section>\n              <section className=\"timer-container\">\n                <h4>{this.state.isSession === true ? \"Grind\" :\n                \"Chill\"}</h4>\n                <span className=\"timer\"> {this.props.timerMin}</span>\n                <span className=\"timer\">:</span>\n                <span className=\"timer\">\n                  {this.state.timerSec === 0 \n                    ? \"00\" \n                    :this.state.timerSec < 10 \n                    ? \"0\" + this.state.timerSec \n                    : this.state.timerSec}\n                </span>\n              </section>     \n              <section className=\"timer-actions\">\n                  <button onClick={this.playTimer}>Start</button>\n                  <button onClick={this.stopTimer}>Stop</button>\n                  <button onClick={this.resetTimer}>Reset</button>\n              </section>\n            </section>\n        );\n    }\n}\n\nexport default Timer;","// React and CSS Imports\nimport React from \"react\";\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport \"./App.scss\";\nimport BreakInterval from './components/break'\nimport SessionLength from './components/session'\nimport Timer from './components/timer'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerMin: 25,\n      isPlay: false\n    };\n\n    this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind\n    (this);\n    this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind\n    (this);\n    this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind\n    (this);\n    this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind\n    (this);\n    this.onToggleInterval = this.onToggleInterval.bind\n    (this);\n    this.onUpdateTimerMinute = this.onUpdateTimerMinute.bind\n    (this);\n    this.onResetTimer = this.onResetTimer.bind\n    (this);\n    this.onPlayStopTimer = this.onPlayStopTimer.bind\n    (this)\n\n  }\nonIncreaseBreakLength() {\n  this.setState((prevState) => {\n    return {\n      breakLength: prevState.breakLength + 1\n    }\n  })\n}\n\nonDecreaseBreakLength() {\n  this.setState((prevState) => {\n    return {\n      breakLength: prevState.breakLength - 1\n    }\n  })\n}\n\nonIncreaseSessionLength() {\n  this.setState((prevState) => {\n    return {\n      sessionLength: prevState.sessionLength + 1,\n      timerMin: prevState.sessionLength + 1\n    }\n  })\n}\n\nonDecreaseSessionLength() {\n  this.setState((prevState) => {\n    return {\n      sessionLength: prevState.sessionLength - 1,\n      timerMin: prevState.sessionLength - 1\n    }\n  })\n}\n\nonUpdateTimerMinute(){\n  this.setState((prevState) => {\n    return{\n      timerMin : prevState.timerMin - 1\n    }\n  })\n}\n\nonToggleInterval(isSession) {\n  if (isSession) {\n    this.setState({\n      timerMin: this.state.sessionLength\n    \n    })\n\n  } else {\n    this.setState({\n      timerMin: this.state.breakLength\n    })\n\n  }\n}\n\nonResetTimer(){\n  this.setState({\n    timerMin: this.state.sessionLength\n  })\n}\n\nonPlayStopTimer(isPlay){\n  this.setState({\n    isPlay: isPlay\n  })\n}\n\n  render(){\n    return (\n      <main>\n        <Router basename=\"/zothack-pomodoro\">\n        <h2>Pomodoro Clock</h2>\n        <section className=\"interval-main-container\">\n          <BreakInterval \n            isPlay={this.state.isPlay}\n            breakInterval={this.state.breakLength}\n            increaseBreak={this.onIncreaseBreakLength}\n            decreaseBreak={this.onDecreaseBreakLength}/>\n          <SessionLength \n            isPlay={this.state.isPlay}\n            sessionLength={this.state.sessionLength}\n            increaseSession={this.onIncreaseSessionLength}\n            decreaseSession={this.onDecreaseSessionLength}/>\n        </section>\n        <Timer \n        timerMin={this.state.timerMin}\n        breakLength={this.state.breakLength}\n        updateTimerMin = {this.onUpdateTimerMinute}\n        toggleInterval = {this.onToggleInterval}\n        resetTimer={this.onResetTimer}\n        onPlayStopTimer={this.onPlayStopTimer}\n        />\n        <Switch>\n            <Route exact path=\"/\"/>\n          </Switch>\n        </Router>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}