{"version":3,"sources":["components/break.js","components/session.js","components/timer.js","App.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","className","disabled","isPlay","onClick","breakInterval","decreaseBreak","sessionLength","increaseBreak","SessionLength","decreaseSession","increaseSession","Timer","state","isSession","timerSec","intervalId","playTimer","bind","decreaseTimer","stopTimer","resetTimer","setInterval","this","onPlayStopTimer","setState","timerMin","toggleInterval","updateTimerMin","prevState","clearInterval","React","Component","App","breakLength","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","onToggleInterval","onUpdateTimerMinute","onResetTimer","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.90f78607.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction BreakInterval(props) {\r\n    function decreaseCounter() {\r\n        if (props.breakInterval === 1) {\r\n            return;\r\n        }\r\n        props.decreaseBreak()\r\n    }\r\n\r\n    function increaseCounter() {\r\n        if (props.sessionLength === 60) {\r\n            return;\r\n        }\r\n\r\n        props.increaseBreak()\r\n    }\r\n\r\n  return (\r\n    <section>\r\n        <h4>Break Length</h4>\r\n        <section className=\"interval-container\">\r\n            <button disabled= {props.isPlay === true ? \"disabled\" : \"\"} onClick={decreaseCounter}>-</button>\r\n            <p className=\"interval-length\">{props.breakInterval}</p>\r\n            <button disabled= {props.isPlay === true ? \"disabled\" : \"\"} onClick={increaseCounter}>+</button>\r\n        </section>\r\n    </section>\r\n    )\r\n}\r\n\r\nexport default BreakInterval;","import React from 'react';\r\n\r\nfunction SessionLength(props) {\r\n    function decreaseSession() {\r\n        if (props.sessionLength === 1) {\r\n            return;\r\n        }\r\n        props.decreaseSession();\r\n    }\r\n\r\n    function increaseSession() {\r\n        if (props.sessionLength === 60) {\r\n            return;\r\n        }\r\n        props.increaseSession();\r\n    }\r\n  return (\r\n    <section>\r\n    <h4>Session Length</h4>\r\n        <section className=\"interval-container\">\r\n            <button disabled= {props.isPlay === true ? \"disabled\" : \"\"} onClick={decreaseSession}>-</button>\r\n            <p className=\"interval-length\">{props.sessionLength}</p>\r\n            <button  disabled= {props.isPlay === true ? \"disabled\" : \"\"} onClick={increaseSession}>+</button>\r\n        </section>\r\n    </section>\r\n        \r\n    );\r\n}\r\n\r\nexport default SessionLength;","import React from 'react';\r\n\r\nclass Timer extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            isSession: true,\r\n            timerSec: 0,\r\n            intervalId : 0\r\n        };\r\n        this.playTimer = this.playTimer.bind(this);\r\n        this.decreaseTimer = this.decreaseTimer.bind(this);\r\n        this.stopTimer = this.stopTimer.bind(this);\r\n        this.resetTimer = this.resetTimer.bind(this)\r\n    }\r\n\r\n    playTimer(){\r\n        let intervalId = setInterval(this.decreaseTimer, 1000)\r\n        this.props.onPlayStopTimer(true);\r\n        this.setState({\r\n            intervalId: intervalId\r\n        })\r\n    }\r\n\r\n    decreaseTimer(){\r\n        switch(this.state.timerSec){\r\n            case 0:\r\n                if(this.props.timerMin === 0){\r\n                    if(this.state.isSession){\r\n                        this.setState({\r\n                            isSession: false\r\n                        });\r\n\r\n                        this.props.toggleInterval(this.state.isSession);\r\n\r\n                    }else{\r\n                        this.setState({\r\n                            isSession: true\r\n                        });\r\n                    \r\n                        this.props.toggleInterval(this.state.isSession);\r\n                    }\r\n                }else{\r\n                    this.props.updateTimerMin() \r\n                    this.setState({\r\n                    timerSec: 59\r\n                }) \r\n            }\r\n                break;\r\n            default:\r\n                this.setState((prevState) =>{\r\n                    return{\r\n                        timerSec: prevState.timerSec -1\r\n                    }\r\n\r\n                })\r\n                break;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    stopTimer(){\r\n        clearInterval(this.state.intervalId);\r\n        this.props.onPlayStopTimer(false);\r\n\r\n    }\r\n\r\n    resetTimer(){\r\n        this.stopTimer();\r\n        this.props.resetTimer();\r\n        this.props.onPlayStopTimer(false);\r\n        this.setState({\r\n            timerSec:0,\r\n            isSession: true\r\n        })\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n            <section>\r\n              <section className=\"timer-container\">\r\n                <h4>{this.state.isSession === true ? \"Session\" :\r\n                \"Break\"}</h4>\r\n                <span className=\"timer\"> {this.props.timerMin}</span>\r\n                <span className=\"timer\">:</span>\r\n                <span className=\"timer\">\r\n                  {this.state.timerSec === 0 \r\n                    ? \"00\" \r\n                    :this.state.timerSec < 10 \r\n                    ? \"0\" + this.state.timerSec \r\n                    : this.state.timerSec}\r\n                </span>\r\n              </section>     \r\n              <sections className=\"timer-actions\">\r\n                  <button onClick={this.playTimer}>Start</button>\r\n                  <button onClick={this.stopTimer}>Stop</button>\r\n                  <button onClick={this.resetTimer}>Reset</button>\r\n              </sections>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","// React and CSS Imports\r\nimport React from \"react\";\r\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\r\nimport \"./App.scss\";\r\nimport BreakInterval from './components/break'\r\nimport SessionLength from './components/session'\r\nimport Timer from './components/timer'\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      breakLength: 5,\r\n      sessionLength: 25,\r\n      timerMin: 25,\r\n      isPlay: false\r\n    };\r\n\r\n    this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind\r\n    (this);\r\n    this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind\r\n    (this);\r\n    this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind\r\n    (this);\r\n    this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind\r\n    (this);\r\n    this.onToggleInterval = this.onToggleInterval.bind\r\n    (this);\r\n    this.onUpdateTimerMinute = this.onUpdateTimerMinute.bind\r\n    (this);\r\n    this.onResetTimer = this.onResetTimer.bind\r\n    (this);\r\n    this.onPlayStopTimer = this.onPlayStopTimer.bind\r\n    (this)\r\n\r\n  }\r\nonIncreaseBreakLength() {\r\n  this.setState((prevState) => {\r\n    return {\r\n      breakLength: prevState.breakLength + 1\r\n    }\r\n  })\r\n}\r\n\r\nonDecreaseBreakLength() {\r\n  this.setState((prevState) => {\r\n    return {\r\n      breakLength: prevState.breakLength - 1\r\n    }\r\n  })\r\n}\r\n\r\nonIncreaseSessionLength() {\r\n  this.setState((prevState) => {\r\n    return {\r\n      sessionLength: prevState.sessionLength + 1,\r\n      timerMin: prevState.sessionLength + 1\r\n    }\r\n  })\r\n}\r\n\r\nonDecreaseSessionLength() {\r\n  this.setState((prevState) => {\r\n    return {\r\n      sessionLength: prevState.sessionLength - 1,\r\n      timerMin: prevState.sessionLength - 1\r\n    }\r\n  })\r\n}\r\n\r\nonUpdateTimerMinute(){\r\n  this.setState((prevState) => {\r\n    return{\r\n      timerMin : prevState.timerMin - 1\r\n    }\r\n  })\r\n}\r\n\r\nonToggleInterval(isSession) {\r\n  if (isSession) {\r\n    this.setState({\r\n      timerMin: this.state.sessionLength\r\n    \r\n    })\r\n\r\n  } else {\r\n    this.setState({\r\n      timerMin: this.state.breakLength\r\n    })\r\n\r\n  }\r\n}\r\n\r\nonResetTimer(){\r\n  this.setState({\r\n    timerMin: this.state.sessionLength\r\n  })\r\n}\r\n\r\nonPlayStopTimer(isPlay){\r\n  this.setState({\r\n    isPlay: isPlay\r\n  })\r\n}\r\n\r\n  render(){\r\n    return (\r\n      <main>\r\n        <Router basename=\"zothack-pomodoro\">\r\n        <h2>Pomodoro Clock</h2>\r\n        <section className=\"interval-main-container\">\r\n          <BreakInterval \r\n            isPlay={this.state.isPlay}\r\n            breakInterval={this.state.breakLength}\r\n            increaseBreak={this.onIncreaseBreakLength}\r\n            decreaseBreak={this.onDecreaseBreakLength}/>\r\n          <SessionLength \r\n            isPlay={this.state.isPlay}\r\n            sessionLength={this.state.sessionLength}\r\n            increaseSession={this.onIncreaseSessionLength}\r\n            decreaseSession={this.onDecreaseSessionLength}/>\r\n        </section>\r\n        <Timer \r\n        timerMin={this.state.timerMin}\r\n        breakLength={this.state.breakLength}\r\n        updateTimerMin = {this.onUpdateTimerMinute}\r\n        toggleInterval = {this.onToggleInterval}\r\n        resetTimer={this.onResetTimer}\r\n        onPlayStopTimer={this.onPlayStopTimer}\r\n        />\r\n        <Switch>\r\n            <Route exact path=\"/\"/>\r\n          </Switch>\r\n        </Router>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}